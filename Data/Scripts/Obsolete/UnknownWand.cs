using System;using Server;using Server.Network;using System.Text;using Server.Items;using Server.Mobiles;using Server.Misc;namespace Server.Items{	public class UnknownWand : Item	{		public override void ResourceChanged( CraftResource resource )		{			if ( !ResourceCanChange() )				return;			m_Resource = resource;			Hue = CraftResources.GetHue(m_Resource);			InvalidateProperties();		}		public int WandLevel;		public string WandOrigin;		[CommandProperty(AccessLevel.Owner)]		public int Wand_Level { get { return WandLevel; } set { WandLevel = value; InvalidateProperties(); } }		[CommandProperty(AccessLevel.Owner)]		public string Wand_Origin { get { return WandOrigin; } set { WandOrigin = value; InvalidateProperties(); } }		[Constructable]		public UnknownWand() : base( 0xDF2 )		{			ItemID = Utility.RandomList( 0xDF2, 0xDF3, 0xDF4, 0xDF5 );			string sWand = "a strange";			switch( Utility.RandomMinMax( 0, 6 ) )			{				case 0: sWand = "an odd"; break;				case 1: sWand = "an unusual"; break;				case 2: sWand = "a bizarre"; break;				case 3: sWand = "a curious"; break;				case 4: sWand = "a peculiar"; break;				case 5: sWand = "a strange"; break;				case 6: sWand = "a weird"; break;			}			Weight = 1.0;			ResourceMods.SetRandomResource( true, true, this, CraftResource.Iron, false, null );			if ( Utility.RandomBool() )				ResourceMods.SetRandomResource( true, true, this, CraftResource.AmethystBlock, false, null );			Name = sWand + " wand";			WandLevel = Utility.RandomMinMax( 1, 8 );			string sLanguage = "pixie";			switch( Utility.RandomMinMax( 0, 35 ) )			{				case 0: sLanguage = "balron"; break;				case 1: sLanguage = "pixie"; break;				case 2: sLanguage = "centaur"; break;				case 3: sLanguage = "demonic"; break;				case 4: sLanguage = "dragon"; break;				case 5: sLanguage = "dwarvish"; break;				case 6: sLanguage = "elven"; break;				case 7: sLanguage = "fey"; break;				case 8: sLanguage = "gargoyle"; break;				case 9: sLanguage = "cyclops"; break;				case 10: sLanguage = "gnoll"; break;				case 11: sLanguage = "goblin"; break;				case 12: sLanguage = "gremlin"; break;				case 13: sLanguage = "druidic"; break;				case 14: sLanguage = "tritun"; break;				case 15: sLanguage = "minotaur"; break;				case 16: sLanguage = "naga"; break;				case 17: sLanguage = "ogrish"; break;				case 18: sLanguage = "orkish"; break;				case 19: sLanguage = "sphinx"; break;				case 20: sLanguage = "treekin"; break;				case 21: sLanguage = "trollish"; break;				case 22: sLanguage = "undead"; break;				case 23: sLanguage = "vampire"; break;				case 24: sLanguage = "dark elf"; break;				case 25: sLanguage = "magic"; break;				case 26: sLanguage = "human"; break;				case 27: sLanguage = "symbolic"; break;				case 28: sLanguage = "runic"; break;			}			string sPart = "strange ";			switch( Utility.RandomMinMax( 0, 5 ) )			{				case 0:	sPart = "strange ";	break;				case 1:	sPart = "odd ";		break;				case 2:	sPart = "ancient ";	break;				case 3:	sPart = "unknown ";	break;				case 4:	sPart = "cryptic ";	break;				case 5:	sPart = "mystical ";	break;			}			WandOrigin = "etched with " + sPart + sLanguage + " symbols";		}		public static void WandType( Item wand, Mobile m, Mobile vendor )		{			if ( Utility.RandomMinMax( 1, 100 ) > 10 )			{				UnknownWand stick = (UnknownWand)wand;				int stickLevel = stick.WandLevel;				int stickType = Utility.RandomMinMax( 0, (8 * stickLevel) );				string stickName = "";				Item newWand = null;			}			else			{				int nJunk = Utility.RandomMinMax( 1, 5 );				string stickName = "";				switch( nJunk )				{					case 1: stickName = "a useless stick"; break;					case 2: stickName = "a wand that was never enchanted"; break;					case 3: stickName = "a fake wand"; break;					case 4: stickName = "nothing magical at all"; break;					case 5: stickName = "a simple metal rod"; break;				}				m.SendMessage( "This seems to be " + stickName + ", so you throw it away." );			}		}		public override void OnDoubleClick( Mobile from )		{			if ( !Movable )			{				from.SendMessage( "That cannot move so you cannot identify it." );				return;			}			else if ( !IsChildOf( from.Backpack ) && MySettings.S_IdentifyItemsOnlyInPack ) 			{				from.SendMessage( "This must be in your backpack to identify." );				return;			}			else if ( !from.InRange( this.GetWorldLocation(), 3 ) )			{				from.SendMessage( "You will need to get closer to identify that." );				return;			}		}		public UnknownWand( Serial serial ) : base( serial )		{		}        public override void AddNameProperties(ObjectPropertyList list)		{            base.AddNameProperties(list);			list.Add( 1070722, WandOrigin);			list.Add( 1049644, "Unidentified"); // PARENTHESIS        }		public override void Serialize( GenericWriter writer )		{			base.Serialize( writer );			writer.Write( (int) 1 ); // version            writer.Write( WandLevel );            writer.Write( WandOrigin );		}		public override void Deserialize( GenericReader reader )		{			base.Deserialize( reader );			int version = reader.ReadInt();            WandLevel = reader.ReadInt();            WandOrigin = reader.ReadString();			if ( version < 1 )			{				Hue = reader.ReadInt();				ItemID = reader.ReadInt();				string WandMetal = reader.ReadString();			}			Timer.DelayCall( TimeSpan.FromSeconds( 1.0 ), new TimerStateCallback( Cleanup ), this );		}		private void Cleanup( object state )		{			Item item = new MagicalWand(0);			Server.Misc.Cleanup.DoCleanup( (Item)state, item );		}	}}